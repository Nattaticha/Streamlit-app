import streamlit as st
import requests
from PIL import Image, ImageFilter, ImageEnhance, ImageOps
import numpy as np
import cv2
from io import BytesIO
import matplotlib.pyplot as plt

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤
st.set_page_config(
    page_title="Image Processing App",
    page_icon="üñºÔ∏è",
    layout="wide"
)

# ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏´‡∏•‡∏±‡∏Å
st.title("üñºÔ∏è Image Processing Application")
st.markdown("‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û ‡∏û‡∏£‡πâ‡∏≠‡∏° GUI ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢")

# Sidebar ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö navigation
st.sidebar.title("üõ†Ô∏è ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠")
option = st.sidebar.selectbox(
    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
    ["üì• ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û", "üåê ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å URL", "üé® ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û", "üìä ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"]
)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å URL
def load_image_from_url(url):
    try:
        response = requests.get(url)
        response.raise_for_status()
        image = Image.open(BytesIO(response.content))
        return image
    except Exception as e:
        st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ: {e}")
        return None

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö custom image processing
def apply_custom_filter(image, filter_type, intensity=1.0):
    """Apply custom filters to image"""
    if filter_type == "Blur":
        return image.filter(ImageFilter.GaussianBlur(radius=intensity))
    elif filter_type == "Sharpen":
        enhancer = ImageEnhance.Sharpness(image)
        return enhancer.enhance(1 + intensity)
    elif filter_type == "Brightness":
        enhancer = ImageEnhance.Brightness(image)
        return enhancer.enhance(intensity)
    elif filter_type == "Contrast":
        enhancer = ImageEnhance.Contrast(image)
        return enhancer.enhance(intensity)
    elif filter_type == "Saturation":
        enhancer = ImageEnhance.Color(image)
        return enhancer.enhance(intensity)
    elif filter_type == "Emboss":
        return image.filter(ImageFilter.EMBOSS)
    elif filter_type == "Edge Detection":
        return image.filter(ImageFilter.FIND_EDGES)
    elif filter_type == "Invert":
        return ImageOps.invert(image.convert('RGB'))
    else:
        return image

# Initialize session state
if 'current_image' not in st.session_state:
    st.session_state.current_image = None
if 'processed_image' not in st.session_state:
    st.session_state.processed_image = None

# ‡∏´‡∏ô‡πâ‡∏≤‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û
if option == "üì• ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û":
    st.header("üì• ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå")
    
    uploaded_file = st.file_uploader(
        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û",
        type=['png', 'jpg', 'jpeg', 'gif', 'bmp'],
        help="‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå PNG, JPG, JPEG, GIF, BMP"
    )
    
    if uploaded_file is not None:
        # ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û
        image = Image.open(uploaded_file)
        st.session_state.current_image = image
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö")
            st.image(image, caption="‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î", use_container_width=True)
        
        with col2:
            st.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û")
            st.write(f"**‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå:** {uploaded_file.name}")
            st.write(f"**‡∏Ç‡∏ô‡∏≤‡∏î:** {image.size[0]} x {image.size[1]} pixels")
            st.write(f"**‡πÇ‡∏´‡∏°‡∏î‡∏™‡∏µ:** {image.mode}")
            st.write(f"**‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå:** {len(uploaded_file.getvalue())} bytes")

# ‡∏´‡∏ô‡πâ‡∏≤‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å URL
elif option == "üåê ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å URL":
    st.header("üåê ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å URL")
    
    url = st.text_input(
        "‡πÉ‡∏™‡πà URL ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û",
        placeholder="https://example.com/image.jpg",
        help="‡πÉ‡∏™‡πà‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î"
    )
    
    if st.button("üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û"):
        if url:
            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û..."):
                image = load_image_from_url(url)
                if image:
                    st.session_state.current_image = image
                    
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        st.subheader("‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î")
                        st.image(image, caption="‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å URL", use_container_width=True)
                    
                    with col2:
                        st.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û")
                        st.write(f"**URL:** {url}")
                        st.write(f"**‡∏Ç‡∏ô‡∏≤‡∏î:** {image.size[0]} x {image.size[1]} pixels")
                        st.write(f"**‡πÇ‡∏´‡∏°‡∏î‡∏™‡∏µ:** {image.mode}")
        else:
            st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà URL ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û")

# ‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û
elif option == "üé® ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û":
    st.header("üé® ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û")
    
    if st.session_state.current_image is None:
        st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å URL")
        st.info("‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ '‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û' ‡∏´‡∏£‡∏∑‡∏≠ '‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å URL' ‡∏Å‡πà‡∏≠‡∏ô")
    else:
        # ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
        st.subheader("‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö")
        st.image(st.session_state.current_image, caption="‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö", width=400)
        
        # Custom Parameters ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Image Processing
        st.subheader("üõ†Ô∏è ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏†‡∏≤‡∏û")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå
            filter_type = st.selectbox(
                "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå",
                ["None", "Blur", "Sharpen", "Brightness", "Contrast", "Saturation", "Emboss", "Edge Detection", "Invert"],
                help="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ"
            )
            
            # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡∏≠‡∏á‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå
            if filter_type in ["Blur", "Sharpen", "Brightness", "Contrast", "Saturation"]:
                if filter_type == "Blur":
                    intensity = st.slider("‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡∏≠‡∏á Blur", 0.1, 5.0, 1.0, 0.1)
                elif filter_type == "Brightness":
                    intensity = st.slider("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡πà‡∏≤‡∏á", 0.1, 3.0, 1.0, 0.1)
                elif filter_type == "Contrast":
                    intensity = st.slider("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏°‡∏ä‡∏±‡∏î", 0.1, 3.0, 1.0, 0.1)
                elif filter_type == "Saturation":
                    intensity = st.slider("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡∏™‡∏µ", 0.0, 3.0, 1.0, 0.1)
                else:
                    intensity = st.slider("‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°", 0.1, 3.0, 1.0, 0.1)
            else:
                intensity = 1.0
        
        with col2:
            # ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î
            st.subheader("üìè ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û")
            resize_option = st.checkbox("‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û")
            
            if resize_option:
                original_width, original_height = st.session_state.current_image.size
                
                new_width = st.number_input("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á (pixels)", 
                                          min_value=50, 
                                          max_value=2000, 
                                          value=original_width)
                
                new_height = st.number_input("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á (pixels)", 
                                           min_value=50, 
                                           max_value=2000, 
                                           value=original_height)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
        if st.button("üöÄ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û", type="primary"):
            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û..."):
                processed_image = st.session_state.current_image.copy()
                
                # ‡πÉ‡∏ä‡πâ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå
                if filter_type != "None":
                    processed_image = apply_custom_filter(processed_image, filter_type, intensity)
                
                # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î
                if resize_option:
                    processed_image = processed_image.resize((int(new_width), int(new_height)))
                
                st.session_state.processed_image = processed_image
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
                st.success("‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß
        if st.session_state.processed_image is not None:
            st.subheader("‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.image(st.session_state.processed_image, 
                        caption="‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•", 
                        use_container_width=True)
            
            with col2:
                # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà
                st.write("**‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏°‡πà:**")
                st.write(f"‡∏Ç‡∏ô‡∏≤‡∏î: {st.session_state.processed_image.size[0]} x {st.session_state.processed_image.size[1]}")
                st.write(f"‡πÇ‡∏´‡∏°‡∏î‡∏™‡∏µ: {st.session_state.processed_image.mode}")
                
                # ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û
                buf = BytesIO()
                st.session_state.processed_image.save(buf, format="PNG")
                
                st.download_button(
                    label="üíæ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û",
                    data=buf.getvalue(),
                    file_name="processed_image.png",
                    mime="image/png"
                )

# ‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
elif option == "üìä ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•":
    st.header("üìä ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≤‡∏ü")
    
    if st.session_state.current_image is None:
        st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô")
    else:
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô numpy array
        image_array = np.array(st.session_state.current_image)
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üìà Histogram ‡∏Ç‡∏≠‡∏á‡∏™‡∏µ‡πÅ‡∏î‡∏á-‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß-‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô")
            
            fig, ax = plt.subplots(figsize=(10, 6))
            
            if len(image_array.shape) == 3:  # ‡∏†‡∏≤‡∏û‡∏™‡∏µ
                colors = ['red', 'green', 'blue']
                for i, color in enumerate(colors):
                    hist = cv2.calcHist([image_array], [i], None, [256], [0, 256])
                    ax.plot(hist, color=color, alpha=0.7, label=f'{color.capitalize()} channel')
            else:  # ‡∏†‡∏≤‡∏û‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥
                hist = cv2.calcHist([image_array], [0], None, [256], [0, 256])
                ax.plot(hist, color='black', label='Grayscale')
            
            ax.set_xlabel('‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡∏≠‡∏á‡∏™‡∏µ')
            ax.set_ylabel('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Pixels')
            ax.set_title('Color Histogram')
            ax.legend()
            ax.grid(True, alpha=0.3)
            
            st.pyplot(fig)
        
        with col2:
            st.subheader("üìã ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏†‡∏≤‡∏û")
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
            if len(image_array.shape) == 3:
                # ‡∏†‡∏≤‡∏û‡∏™‡∏µ
                mean_rgb = np.mean(image_array, axis=(0, 1))
                std_rgb = np.std(image_array, axis=(0, 1))
                
                st.write("**‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏™‡∏µ (RGB):**")
                st.write(f"üî¥ Red: {mean_rgb[0]:.2f}")
                st.write(f"üü¢ Green: {mean_rgb[1]:.2f}")
                st.write(f"üîµ Blue: {mean_rgb[2]:.2f}")
                
                st.write("**‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏ö‡∏µ‡∏¢‡∏á‡πÄ‡∏ö‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô (RGB):**")
                st.write(f"üî¥ Red: {std_rgb[0]:.2f}")
                st.write(f"üü¢ Green: {std_rgb[1]:.2f}")
                st.write(f"üîµ Blue: {std_rgb[2]:.2f}")
            else:
                # ‡∏†‡∏≤‡∏û‡∏Ç‡∏≤‡∏ß‡∏î‡∏≥
                mean_gray = np.mean(image_array)
                std_gray = np.std(image_array)
                
                st.write(f"**‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢:** {mean_gray:.2f}")
                st.write(f"**‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏ö‡∏µ‡∏¢‡∏á‡πÄ‡∏ö‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô:** {std_gray:.2f}")
            
            st.write(f"**‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î:** {np.max(image_array)}")
            st.write(f"**‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î:** {np.min(image_array)}")
            st.write(f"**‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Pixels:** {image_array.size:,}")
        
        # ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
        if st.session_state.processed_image is not None:
            st.subheader("üìä ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•")
            
            processed_array = np.array(st.session_state.processed_image)
            
            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 5))
            
            # Histogram ‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
            if len(image_array.shape) == 3:
                colors = ['red', 'green', 'blue']
                for i, color in enumerate(colors):
                    hist = cv2.calcHist([image_array], [i], None, [256], [0, 256])
                    ax1.plot(hist, color=color, alpha=0.7)
            
            ax1.set_title('‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö')
            ax1.set_xlabel('‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡∏≠‡∏á‡∏™‡∏µ')
            ax1.set_ylabel('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Pixels')
            ax1.grid(True, alpha=0.3)
            
            # Histogram ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß
            if len(processed_array.shape) == 3:
                for i, color in enumerate(colors):
                    hist = cv2.calcHist([processed_array], [i], None, [256], [0, 256])
                    ax2.plot(hist, color=color, alpha=0.7)
            
            ax2.set_title('‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•')
            ax2.set_xlabel('‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡∏≠‡∏á‡∏™‡∏µ')
            ax2.set_ylabel('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Pixels')
            ax2.grid(True, alpha=0.3)
            
            st.pyplot(fig)

# Footer
st.sidebar.markdown("---")
st.sidebar.markdown("### üìã ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
st.sidebar.markdown("""
1. **‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û** - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå
2. **‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å URL** - ‡πÉ‡∏™‡πà‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏†‡∏≤‡∏û
3. **‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û** - ‡πÉ‡∏ä‡πâ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á
4. **‡∏î‡∏π‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•** - ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏†‡∏≤‡∏û
""")

st.sidebar.markdown("### ‚ÑπÔ∏è ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÅ‡∏≠‡∏õ")
st.sidebar.info("‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ Streamlit ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏†‡∏≤‡∏û‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ")

# ‡πÅ‡∏™‡∏î‡∏á session state ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug)
if st.sidebar.checkbox("üîß ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Debug"):
    st.sidebar.write("Current image loaded:", st.session_state.current_image is not None)
    st.sidebar.write("Processed image available:", st.session_state.processed_image is not None)
